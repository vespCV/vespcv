---
description: 
globs: 
alwaysApply: true
---
# Project Structure Documentation

## Overview
This document explains the current structure of the vespCV project and where new additions should be placed.

## Directory Structure
**vespCV/**: Project folder on the Raspberry Pi 4. Accessed via SSH using the Cursor IDE.

- **legacy/**: old code from the proof of concept version and code to test stuff with yolov10.
    - **detectAllConf.py**: This script continuously monitors for Asian hornets using a Raspberry Pi camera and YOLOv10 object detection model. It captures images at regular intervals and processes them for hornet detection. This funcion is the main task of the current vespCV project.
    - **testCSIcamPi.py**: Input: CSI 16 MP sony IMX519 ArduCam. Output: image in folder images, if folder does not exist it creates this folder.
    - **testIntervalCSIcamImagesLedPi2.py**: Uses GPIO pins to turn on LED if a hornet is detected.
    - **testIntervalCSIcamImagesPi.py**
    - **testSlideshowVideoPi.py**: Use a slideshow in .m4v as surrogate for the camera to test the model. Output is in images without boundingboxes, classes and conficence scores. Was used to test the model and saving of the images

- **src/**: The core application code
  - **core/**: Core detection logic (model loading, inference)
    - **detector.py**: running inference on images and applying detection rules, returning results. Aligns with the PRD focus on hornet detection.
    - **detection_utils.py**: prepare data for detection, such as capturing images from the camera or any other tasks that assists but is not core detection.
    - **config_loader**: makes a dictionary from the variables in config.yaml
    - **logger.py**: files to log
    - **image_utils.py**: takes inference results and saves images, fe if vvel is detected without results, or image with bounding boxed, class names and confidence scores.
  - **gui/**: GUI components using Tkinter
  - **utils/**: Helper functions, image processing, logging

- **config/**: YAML/JSON configuration files

- **models/**: Trained model weights

- **tests/**: Unit and integration tests (pytest-based)

- **movies/**: Contains movies and sliders for test purposes

- **doc/**: 
  - **Purpose**: Holds project documentation, including the Product Requirements Document in `@prd.md`.
  - **Placement**: Correct place for developer and user documentation.

- **data/**:
  - **images/**: Saved detection images
  - **logs/**: CSV logs, system metrics

## Additional Files
- **PLANNING.md**: Contains project plan, goals, and deliverables.

- **README.md**: 
  - **Purpose**: First point of contact for anyone visiting this repository on GitHub.
  - **Placement**: Includes project title, description, installation guide, contributing guidelines, roadmap, and acknowledgments (optional).

- **requirements.txt**: Contains all Python libraries with version numbers used in the project.


