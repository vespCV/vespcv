---
description: 
globs: 
alwaysApply: true
---
# Project Structure Documentation

## Overview
This document explains the current structure of the vespCV project and where new additions should be placed.

## Directory Structure

**vespCV/**: 
    Project folder on the Raspberry Pi 4. Accessed via SSH using the Cursor IDE.

- [main.py](mdc:main.py): entry point for the vespCV application
    - configuration loading
    - logging
    - initialization GUI

- **legacy/**: old code from the `Proof of Concept version` and code to test stuff with yolov10.
    - [detectAllConf.py](mdc:legacy/detectAllConf.py): This script continuously monitors for Asian hornets using a Raspberry Pi camera and YOLOv10 object detection model. It captures images at regular intervals and processes them for hornet detection. This function is the main task of the current vespCV project.
    - [testCSIcamPi.py](mdc:legacy/testCSIcamPi.py): Input: CSI 16 MP sony IMX519 ArduCam. Output: image in folder images, if folder does not exist it creates this folder.
    - [testIntervalCSIcamImagesLedPi2.py](mdc:legacy/testIntervalCSIcamImagesLedPi2.py): Uses GPIO pins to turn on LED if a hornet is detected.
    - [testIntervalCSIcamImagesPi.py](mdc:legacy/testIntervalCSIcamImagesPi.py)
    - [testSlideshowVideoPi.py](mdc:legacy/testSlideshowVideoPi.py): Use a slideshow in .m4v as surrogate for the camera to test the model. Output is in images without boundingboxes, classes and conficence scores. Was used to test the model and saving of the images

- **src/**: The core application code
    - **core/**: Core detection logic (model loading, inference)
        - [detector.py](mdc:src/core/detector.py): running inference on images and applying detection rules, returning results. Aligns with the PRD focus on hornet detection.
        - [logger.py](mdc:src/core/logger.py): used to log CPU temperature, detections, and errors.
        - [config_loader.py](mdc:src/core/config_loader.py): makes a dictionary from the variables in config.yaml

    - **gui/**: 
        - [app.py](mdc:src/gui/app.py) GUI components using Tkinter

    - **utils/**: Helper functions, image processing, logging
        - [image_utils.py](mdc:src/utils/image_utils.py): takes inference results and saves images, fe if vvel is detected without results, or image with bounding boxed, class names and confidence scores.
        - [detection_utils.py](mdc:src/utils/detection_utils.py): prepare data for detection, such as capturing images from the camera or any other tasks that assists but is not core detection.

- **config/**: YAML/JSON configuration files
    - [config.yaml](mdc:config/config.yaml) config file.
    - [data.yaml](mdc:config/data.yaml): the file used for yolo training. Contains type [name] and total number [nc] of species the model is trained on. The paths on the top are only used for training purposes.

- **models/**: Trained model weights
    - **yolo112025-04-23default_e200_p20_b-1_augment/weights/best.pt**: The best performing model. We use this as specified in config.yaml
    - **models/yolo112025-04-23_e200_p20_b-1_L4/weights/best.pt**: Second best model. Can be used for test purposes.

- **tests/**: Unit and integration tests (pytest-based). To be completed later.

- **movies/**: Contains movies and sliders for test purposes. To be completed later.

- **doc/**: 
    - [prd.md](mdc:doc/prd.md) : the Product Requirements Document in @prd.md. 
    - Developer and user documentation: To be completed later.

- **data/**:
    - **images/**: Saved detection images. Image to perform inference on [image_for_detection.jpg](mdc:data/images/image_for_detection.jpg). This file should be updated every detection round as specified in the config.yaml under `capture_interval`.
    - **logs/**: 
        - [detector.log](mdc:data/logs/detector.log) : logs detections, To be completed later.: make a log file per session
        - [error_log.csv](mdc:data/logs/error_log.csv) : logs errors
        - [system_stats.csv](mdc:data/logs/system_stats.csv) : logs CPU temperature

## Additional Files

- **PLANNING.md**: Contains project plan, goals, and deliverables. To be completed soon.

- **README.md**: 
  - To be completed later.

- **requirements.txt**: Contains all Python libraries with version numbers used in the project.


