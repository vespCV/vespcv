---
description: 
globs: 
alwaysApply: true
---
# Tech Stack for vespCV

## Introduction
This document outlines the python libraries and tools used in the vespCV project for building an efficient hornet detection system.

## Language
- **Language**: @Python - version 3.11.2 used throughout the codebase because the ease of use and extensive libraries for computer vision.

## Frontend
- **Tkinter**: GUI toolkit to provide real-time image and other features as described in [prd.md](mdc:doc/prd.md)

## Backend
- **ultralytics**: for integrating integrating Ultralytics YOLO into this Python project @https://docs.ultralytics.com/usage/python/. The YOLO11n model has optimized weights @models/yolo112025-04-23default_e200_p20_b-1_augment/weights/best.pt and classes can be found in @config/data.yaml
- **OpenCV**: @opencv-python Library for camera input and image processing. The data.yaml @models/data.yaml provides the class names
- **gpiozero**: Library for handling GPIO pins on the Raspberry Pi for hornet deterrence.
- **PyTorch**: Framework for model inference (CPU-only).

## Supporting Libraries
- **NumPy**: For numerical operations and array manipulations.
- **Pandas**: For data manipulation and analysis (if used).
- **pytest**: For testing framework.

## Development Tools
- **Git and GitHub**: The project uses Git for version control and is hosted on GitHub. 
  - Repository link: @https://github.com/vespCV/vespcv
- **IDE**: Cursor IDE for development and code management.
- **SSH**: The code base is on the raspberry Pi and accessed via SSH to work on a local computer with IDE.

## Logging
- **Logging**: vespCV utilizes Python's built-in logging module to track runtime events, errors, and system status throughout the application run.
- **Timestamp Format**: All log entries include timestamps formatted according to ISO8601/RFC 3339 standards, ensuring clarity and consistency for debugging and monitoring.

### Testing Strategy
- **pytest**:
    - Unit tests: Core functions in isolation
    - Integration tests: Component interactions (e.g., camera + detection)
    - End-to-end tests: Full pipeline simulation

Every technical decision must be justified by the requirements in that document.    