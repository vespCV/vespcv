import tkinter as tk
from tkinter import ttk, messagebox
from PIL import Image, ImageTk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np

class HornetDetectorGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("Bee Safe: Hornet Detector")
        self.master.geometry("1024x768")
        self.master.configure(bg="#FFF8E1")  # Light amber background

        self.create_variables()
        self.create_styles()
        self.create_layout()

    def create_variables(self):
        self.bluetooth_on = tk.BooleanVar(value=True)
        self.hdmi_on = tk.BooleanVar(value=True)
        self.selected_model = tk.StringVar(value="Hornet Hunter v1")
        self.confidence_level = tk.IntVar(value=75)
        self.auto_start = tk.BooleanVar(value=False)
        self.labeling_mode = tk.BooleanVar(value=False)
        self.safety_engaged = tk.BooleanVar(value=True)
        self.harp_charge = tk.IntVar(value=100)
        self.harp_active = tk.BooleanVar(value=False)

    def create_styles(self):
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('TButton', background='#FFA000', foreground='black')
        style.configure('TLabel', background='#FFF8E1', foreground='#795548')
        style.configure('TFrame', background='#FFF8E1')

    def create_layout(self):
        self.create_header()
        self.create_main_content()

    def create_header(self):
        header_frame = ttk.Frame(self.master)
        header_frame.pack(fill=tk.X, padx=10, pady=10)

        ttk.Label(header_frame, text="Bee Safe: Hornet Detector", font=("Arial", 24, "bold")).pack(side=tk.LEFT)

        ttk.Button(header_frame, text="âš™", command=self.open_detection_settings).pack(side=tk.RIGHT)
        ttk.Checkbutton(header_frame, text="ðŸ”µ", variable=self.bluetooth_on).pack(side=tk.RIGHT)
        ttk.Checkbutton(header_frame, text="ðŸ–¥", variable=self.hdmi_on).pack(side=tk.RIGHT)
        ttk.Button(header_frame, text="âš™", command=self.open_settings).pack(side=tk.RIGHT)

    def create_main_content(self):
        main_frame = ttk.Frame(self.master)
        main_frame.pack(expand=True, fill=tk.BOTH, padx=10, pady=10)

        left_frame = ttk.Frame(main_frame)
        left_frame.pack(side=tk.LEFT, expand=True, fill=tk.BOTH)

        right_frame = ttk.Frame(main_frame)
        right_frame.pack(side=tk.RIGHT, expand=True, fill=tk.BOTH)

        self.create_live_feed(left_frame)
        self.create_saved_detections(right_frame)
        self.create_charts(left_frame)
        self.create_electric_harp_control(right_frame)

        control_frame = ttk.Frame(main_frame)
        control_frame.pack(side=tk.BOTTOM, fill=tk.X, pady=10)
        ttk.Button(control_frame, text="Start Detection").pack(side=tk.LEFT, padx=5)
        ttk.Button(control_frame, text="Stop Detection").pack(side=tk.LEFT, padx=5)

    def create_live_feed(self, parent):
        live_feed_frame = ttk.LabelFrame(parent, text="Live Feed")
        live_feed_frame.pack(expand=True, fill=tk.BOTH, padx=5, pady=5)

        # Placeholder for live feed
        canvas = tk.Canvas(live_feed_frame, width=400, height=300, bg="gray")
        canvas.pack(expand=True, fill=tk.BOTH)
        canvas.create_text(200, 150, text="Live Feed Placeholder", fill="white")

    def create_saved_detections(self, parent):
        saved_detections_frame = ttk.LabelFrame(parent, text="Saved Detections")
        saved_detections_frame.pack(expand=True, fill=tk.BOTH, padx=5, pady=5)

        controls_frame = ttk.Frame(saved_detections_frame)
        controls_frame.pack(fill=tk.X)
        ttk.Button(controls_frame, text="Asian Hornets Only").pack(side=tk.LEFT, padx=5)
        ttk.Button(controls_frame, text="Download").pack(side=tk.LEFT, padx=5)

        # Placeholder for saved detections grid
        canvas = tk.Canvas(saved_detections_frame, width=400, height=300, bg="lightgray")
        canvas.pack(expand=True, fill=tk.BOTH)
        canvas.create_text(200, 150, text="Saved Detections Grid Placeholder", fill="black")

    def create_charts(self, parent):
        charts_frame = ttk.Frame(parent)
        charts_frame.pack(expand=True, fill=tk.BOTH, padx=5, pady=5)

        self.create_bar_chart(charts_frame)
        self.create_line_chart(charts_frame)

    def create_bar_chart(self, parent):
        bar_chart_frame = ttk.LabelFrame(parent, text="Insect Detection Count")
        bar_chart_frame.pack(expand=True, fill=tk.BOTH, padx=5, pady=5)

        fig, ax = plt.subplots(figsize=(4, 3))
        insects = ['Hornet', 'Wasp', 'Bee', 'Fly']
        counts = [12, 8, 5, 15]
        ax.bar(insects, counts, color='#FFA000')
        ax.set_ylabel('Count')
        ax.set_title('Insect Detection Count')

        canvas = FigureCanvasTkAgg(fig, master=bar_chart_frame)
        canvas.draw()
        canvas.get_tk_widget().pack(expand=True, fill=tk.BOTH)

    def create_line_chart(self, parent):
        line_chart_frame = ttk.LabelFrame(parent, text="Detection Timeline")
        line_chart_frame.pack(expand=True, fill=tk.BOTH, padx=5, pady=5)

        fig, ax = plt.subplots(figsize=(4, 3))
        times = ['00:00', '01:00', '02:00', '03:00', '04:00', '05:00']
        detections = [2, 1, 0, 3, 5, 2]
        ax.plot(times, detections, color='#FFA000', marker='o')
        ax.set_ylabel('Detections')
        ax.set_title('Detection Timeline')

        canvas = FigureCanvasTkAgg(fig, master=line_chart_frame)
        canvas.draw()
        canvas.get_tk_widget().pack(expand=True, fill=tk.BOTH)

    def create_electric_harp_control(self, parent):
        harp_frame = ttk.LabelFrame(parent, text="Electric Harp Control")
        harp_frame.pack(expand=True, fill=tk.BOTH, padx=5, pady=5)

        ttk.Label(harp_frame, text="Safety:").pack()
        ttk.Checkbutton(harp_frame, text="Engaged", variable=self.safety_engaged).pack()

        ttk.Label(harp_frame, text="Harp Charge:").pack()
        ttk.Progressbar(harp_frame, variable=self.harp_charge, length=200).pack()

        ttk.Button(harp_frame, text="Activate Harp", command=self.toggle_harp).pack(pady=5)
        ttk.Button(harp_frame, text="Recharge", command=self.recharge_harp).pack(pady=5)

    def toggle_harp(self):
        if self.safety_engaged.get():
            messagebox.showwarning("Safety Warning", "Please disengage safety before activating the electric harp.")
        elif self.harp_charge.get() < 20:
            messagebox.showwarning("Low Charge", "Insufficient charge. Please recharge the harp.")
        else:
            self.harp_active.set(not self.harp_active.get())
            if self.harp_active.get():
                self.master.after(1000, self.decrease_charge)

    def decrease_charge(self):
        if self.harp_active.get() and self.harp_charge.get() > 0:
            self.harp_charge.set(self.harp_charge.get() - 1)
            self.master.after(1000, self.decrease_charge)
        elif self.harp_charge.get() == 0:
            self.harp_active.set(False)

    def recharge_harp(self):
        self.harp_charge.set(100)

    def open_detection_settings(self):
        settings_window = tk.Toplevel(self.master)
        settings_window.title("Detection Settings")
        settings_window.geometry("300x200")

        ttk.Label(settings_window, text="Model Selection:").pack()
        ttk.Combobox(settings_window, textvariable=self.selected_model, 
                     values=["Hornet Hunter v1", "BeeGuard Pro", "ApiaryAI Elite"]).pack()

        ttk.Label(settings_window, text="Confidence Level:").pack()
        ttk.Scale(settings_window, from_=0, to=100, variable=self.confidence_level).pack()

        ttk.Checkbutton(settings_window, text="Auto-start", variable=self.auto_start).pack()
        ttk.Checkbutton(settings_window, text="Labeling Mode", variable=self.labeling_mode).pack()

    def open_settings(self):
        settings_window = tk.Toplevel(self.master)
        settings_window.title("Settings")
        settings_window.geometry("300x200")

        ttk.Label(settings_window, text="WiFi Settings").pack()
        ttk.Entry(settings_window, placeholder="WiFi SSID").pack()
        ttk.Entry(settings_window, placeholder="WiFi Password", show="*").pack()
        ttk.Button(settings_window, text="Connect").pack()

        ttk.Label(settings_window, text="Camera Selection").pack()
        ttk.Combobox(settings_window, values=["Camera 1", "Camera 2", "Camera 3"]).pack()

if __name__ == "__main__":
    root = tk.Tk()
    app = HornetDetectorGUI(root)
    root.mainloop()